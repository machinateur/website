# Configuration based on https://symfony.com/doc/current/setup/web_server_configuration.html#adding-rewrite-rules
<VirtualHost *>
    HostnameLookups Off

    DocumentRoot /var/www/website/public

    # Configuration based on https://stackoverflow.com/a/46648967/2557685
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/ssl.crt
    SSLCertificateKeyFile /etc/apache2/ssl/ssl.key

    <Directory /var/www/website/public>
        AllowOverride None

        # Use the front controller as index file. It serves as a fallback solution when
        # every other rewrite/redirect fails (e.g. in an aliased environment without
        # mod_rewrite). Additionally, this reduces the matching process for the
        # start page (path "/") because otherwise Apache will apply the rewriting rules
        # to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).
        DirectoryIndex index.php

        # By default, Apache does not evaluate symbolic links if you did not enable this
        # feature in your server configuration. Uncomment the following line if you
        # install assets as symlinks or if you experience problems related to symlinks
        # when compiling LESS/Sass/CoffeScript assets.
        #Options +FollowSymlinks

        # Disabling MultiViews prevents unwanted negotiation, e.g. "/index" should not resolve
        # to the front controller "/index.php" but be rewritten to "/index.php/index".
        <IfModule mod_negotiation.c>
            Options -MultiViews
        </IfModule>

        <IfModule mod_rewrite.c>
            RewriteEngine On

            RewriteCond %{HTTP_HOST} ^(www\.)(.*) [NC]
            RewriteRule (.*) https://%2%{REQUEST_URI} [L,R=301]

            # Determine the RewriteBase automatically and set it as environment variable.
            # If you are using Apache aliases to do mass virtual hosting or installed the
            # project in a subdirectory, the base path will be prepended to allow proper
            # resolution of the index.php file and to redirect to the correct URI. It will
            # work in environments without path prefix as well, providing a safe, one-size
            # fits all solution. But as you do not need it in this case, you can comment
            # the following 2 lines to eliminate the overhead.
            RewriteCond %{REQUEST_URI}::$0 ^(/.+)/(.*)::\2$
            RewriteRule .* - [E=BASE:%1]

            # Sets the HTTP_AUTHORIZATION header removed by Apache
            RewriteCond %{HTTP:Authorization} .+
            RewriteRule ^ - [E=HTTP_AUTHORIZATION:%0]

            # Redirect to URI without front controller to prevent duplicate content
            # (with and without `/index.php`). Only do this redirect on the initial
            # rewrite by Apache and not on subsequent cycles. Otherwise we would get an
            # endless redirect loop (request -> rewrite to front controller ->
            # redirect -> request -> ...).
            # So in case you get a "too many redirects" error or you always get redirected
            # to the start page because your Apache does not expose the REDIRECT_STATUS
            # environment variable, you have 2 choices:
            # - disable this feature by commenting the following 2 lines or
            # - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
            #   following RewriteCond (best solution)
            RewriteCond %{ENV:REDIRECT_STATUS} =""
            RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

            # If the requested filename exists, simply serve it.
            # We only want to let Apache serve files and not directories.
            # Rewrite all other queries to the front controller.
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^ %{ENV:BASE}/index.php [L]
        </IfModule>

        <IfModule !mod_rewrite.c>
            <IfModule mod_alias.c>
                # When mod_rewrite is not available, we instruct a temporary redirect of
                # the start page to the front controller explicitly so that the website
                # and the generated links can still be used.
                RedirectMatch 307 ^/$ /index.php/
                # RedirectTemp cannot be used instead
            </IfModule>
        </IfModule>

        <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE application/javascript
            AddOutputFilterByType DEFLATE application/json
            AddOutputFilterByType DEFLATE application/xml
            AddOutputFilterByType DEFLATE image/svg+xml
            AddOutputFilterByType DEFLATE image/x-icon
            AddOutputFilterByType DEFLATE text/html
            AddOutputFilterByType DEFLATE text/css
            AddOutputFilterByType DEFLATE text/javascript
            AddOutputFilterByType DEFLATE text/xml
            AddOutputFilterByType DEFLATE text/plain
        </IfModule>

        <IfModule mod_expires.c>
            # Enable the directives - assuming they're not enabled globally.
            ExpiresActive on

            # Send the 'Expires' header for each of these mimetypes (as defined by server).
            ExpiresByType image/png "access plus 1 month"
            ExpiresByType image/gif "access plus 1 month"
            ExpiresByType image/jpeg "access plus 1 month"

            # Our css may change a bit sometimes, so define shorter expiration.
            ExpiresByType text/css "access plus 1 days"

            # As usual, ms has a special MIME type for icons...
            # http://www.iana.org/assignments/media-types/image/vnd.microsoft.icon
            AddType image/vnd.microsoft.icon .ico
            # But now that we have the icon MIME type, we can use it.
            # Our favicon doesn't change much, if at all.
            ExpiresByType image/vnd.microsoft.icon "access plus 3 months"
        </IfModule>
    </Directory>
</VirtualHost>

<VirtualHost *:80>
    HostnameLookups Off

    <IfModule mod_rewrite.c>
        RewriteEngine on

        RewriteCond %{HTTPS} off
        RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI}
    </IfModule>

    <IfModule !mod_rewrite.c>
        <IfModule mod_alias.c>
            # Thanks to the <Location/> directive we can use expression syntax, since Apache 2.4.19.
            # https://httpd.apache.org/docs/current/mod/mod_alias.html#redirect
            # The "/" is an easy way to apply a configuration to the entire server.
            <Location "/">
                Redirect 301 https://%{SERVER_NAME}%{REQUEST_URI}
            </Location>
        </IfModule>
    </IfModule>
</VirtualHost>
